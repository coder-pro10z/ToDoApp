{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\React\\\\Beginners\\\\ToDoList\\\\todo-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import \"./App.css\";\nimport Navbar from \"./components/Navbar/Navbar.js\";\n\n// function App() {\n//   // State to store the list of tasks\n//   const [todos, setTodos] = useState([]);\n//   // State to store the current input value for a new task\n//   const [task, setTask] = useState(\"\");\n//   // Port number for the API (typically not recommended to hardcode unless necessary)\n//   const port = 1433;\n\n//   // Fetch the list of tasks from the API when the component mounts\n//   useEffect(() => {\n//     fetch(`http://localhost:${port}/api/tasks`)\n//       .then(response => response.json())\n//       .then(data => {\n//         // Assuming the API returns an array of tasks\n//         setTodos(data);\n//       })\n//       .catch(error => console.error(\"Error fetching tasks:\", error));\n//   }, [port]);\n\n//   // Function to add a new task\n//   const addTask = () => {\n//     if (task !== \"\") {\n//       fetch(`http://localhost:${port}/api/tasks`, {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({ description: task }),\n//       })\n//         .then(response => response.json())\n//         .then(data => {\n//           // Assuming the API returns the newly created task's ID\n//           setTodos([...todos, { id: data.taskId, description: task }]);\n//           setTask(\"\"); // Clear the input field after adding the task\n//         })\n//         .catch(error => console.error(\"Error:\", error));\n//     }\n//   };\n\n//   // Function to delete a task by its ID\n//   const deleteTask = (id) => {\n//     fetch(`http://localhost:${port}/api/tasks/${id}`, {\n//       method: \"DELETE\",\n//     })\n//       .then(response => response.json())\n//       .then(() => {\n//         // Remove the deleted task from the state\n//         setTodos(todos.filter(todo => todo.id !== id));\n//       })\n//       .catch(error => console.error(\"Error:\", error));\n//   };\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <h1>ToDo List</h1>\n//           <input\n//             type=\"text\"\n//             value={task}\n//             onChange={(e) => setTask(e.target.value)}\n//             placeholder=\"Enter a new task\"\n//           />\n//           <button onClick={addTask}>Add Task</button>\n//           <ul>\n//             {todos.map((todo) => (\n//               <li key={todo.id}>\n//                 {todo.description}\n//                 <button onClick={() => deleteTask(todo.id)}>Delete</button>\n//               </li>\n//             ))}\n//           </ul>\n//         </header>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [todos, setTodos] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:1433/api/tasks').then(response => response.json()).then(data => {\n      setTodos(data); // Assuming the API returns an array of tasks\n    }).catch(error => console.error('Error fetching tasks:', error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"ToDo List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: todos.map(todo => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: todo.Description\n          }, todo.Id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"4w2FR3x+JAhc2MKl4V8naiLXs70=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Navbar","React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","todos","setTodos","fetch","then","response","json","data","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","todo","Description","Id","_c","$RefreshReg$"],"sources":["D:/Projects/React/Beginners/ToDoList/todo-app/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import \"./App.css\";\nimport Navbar from \"./components/Navbar/Navbar.js\";\n\n// function App() {\n//   // State to store the list of tasks\n//   const [todos, setTodos] = useState([]);\n//   // State to store the current input value for a new task\n//   const [task, setTask] = useState(\"\");\n//   // Port number for the API (typically not recommended to hardcode unless necessary)\n//   const port = 1433;\n\n//   // Fetch the list of tasks from the API when the component mounts\n//   useEffect(() => {\n//     fetch(`http://localhost:${port}/api/tasks`)\n//       .then(response => response.json())\n//       .then(data => {\n//         // Assuming the API returns an array of tasks\n//         setTodos(data);\n//       })\n//       .catch(error => console.error(\"Error fetching tasks:\", error));\n//   }, [port]);\n\n//   // Function to add a new task\n//   const addTask = () => {\n//     if (task !== \"\") {\n//       fetch(`http://localhost:${port}/api/tasks`, {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({ description: task }),\n//       })\n//         .then(response => response.json())\n//         .then(data => {\n//           // Assuming the API returns the newly created task's ID\n//           setTodos([...todos, { id: data.taskId, description: task }]);\n//           setTask(\"\"); // Clear the input field after adding the task\n//         })\n//         .catch(error => console.error(\"Error:\", error));\n//     }\n//   };\n\n//   // Function to delete a task by its ID\n//   const deleteTask = (id) => {\n//     fetch(`http://localhost:${port}/api/tasks/${id}`, {\n//       method: \"DELETE\",\n//     })\n//       .then(response => response.json())\n//       .then(() => {\n//         // Remove the deleted task from the state\n//         setTodos(todos.filter(todo => todo.id !== id));\n//       })\n//       .catch(error => console.error(\"Error:\", error));\n//   };\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <h1>ToDo List</h1>\n//           <input\n//             type=\"text\"\n//             value={task}\n//             onChange={(e) => setTask(e.target.value)}\n//             placeholder=\"Enter a new task\"\n//           />\n//           <button onClick={addTask}>Add Task</button>\n//           <ul>\n//             {todos.map((todo) => (\n//               <li key={todo.id}>\n//                 {todo.description}\n//                 <button onClick={() => deleteTask(todo.id)}>Delete</button>\n//               </li>\n//             ))}\n//           </ul>\n//         </header>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    fetch('http://localhost:1433/api/tasks')\n      .then(response => response.json())\n      .then(data => {\n        setTodos(data); // Assuming the API returns an array of tasks\n      })\n      .catch(error => console.error('Error fetching tasks:', error));\n  }, []);\n\n  return (<>\n  <Navbar/>\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>ToDo List</h1>\n        <ul>\n          {todos.map((todo) => (\n            <li key={todo.Id}>\n              {todo.Description}\n            </li>\n          ))}\n        </ul>\n      </header>\n    </div>\n          </>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA,OAAOA,MAAM,MAAM,+BAA+B;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACdS,KAAK,CAAC,iCAAiC,CAAC,CACrCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACZL,QAAQ,CAACK,IAAI,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC,CAAC;EAClE,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAQb,OAAA,CAAAE,SAAA;IAAAa,QAAA,gBACRf,OAAA,CAACL,MAAM;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACPnB,OAAA;MAAKoB,SAAS,EAAC,KAAK;MAAAL,QAAA,eAClBf,OAAA;QAAQoB,SAAS,EAAC,YAAY;QAAAL,QAAA,gBAC5Bf,OAAA;UAAAe,QAAA,EAAI;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAClBnB,OAAA;UAAAe,QAAA,EACGV,KAAK,CAACgB,GAAG,CAAEC,IAAI,iBACdtB,OAAA;YAAAe,QAAA,EACGO,IAAI,CAACC;UAAW,GADVD,IAAI,CAACE,EAAE;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEZ,CACL;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA,eACE,CAAC;AAEb;AAACf,EAAA,CA5BQD,GAAG;AAAAsB,EAAA,GAAHtB,GAAG;AA8BZ,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}