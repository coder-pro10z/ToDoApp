{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\React\\\\Beginners\\\\ToDoList\\\\todo-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import \"./App.css\";\n// import Navbar from \"./components/Navbar/Navbar.js\";\n\n// function App() {\n//   // State to store the list of tasks\n//   const [todos, setTodos] = useState([]);\n//   // State to store the current input value for a new task\n//   const [task, setTask] = useState(\"\");\n//   // Port number for the API (typically not recommended to hardcode unless necessary)\n//   const port = 1433;\n\n//   // Fetch the list of tasks from the API when the component mounts\n//   useEffect(() => {\n//     fetch(`http://localhost:${port}/api/tasks`)\n//       .then(response => response.json())\n//       .then(data => {\n//         // Assuming the API returns an array of tasks\n//         setTodos(data);\n//       })\n//       .catch(error => console.error(\"Error fetching tasks:\", error));\n//   }, [port]);\n\n//   // Function to add a new task\n//   const addTask = () => {\n//     if (task !== \"\") {\n//       fetch(`http://localhost:${port}/api/tasks`, {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({ description: task }),\n//       })\n//         .then(response => response.json())\n//         .then(data => {\n//           // Assuming the API returns the newly created task's ID\n//           setTodos([...todos, { id: data.taskId, description: task }]);\n//           setTask(\"\"); // Clear the input field after adding the task\n//         })\n//         .catch(error => console.error(\"Error:\", error));\n//     }\n//   };\n\n//   // Function to delete a task by its ID\n//   const deleteTask = (id) => {\n//     fetch(`http://localhost:${port}/api/tasks/${id}`, {\n//       method: \"DELETE\",\n//     })\n//       .then(response => response.json())\n//       .then(() => {\n//         // Remove the deleted task from the state\n//         setTodos(todos.filter(todo => todo.id !== id));\n//       })\n//       .catch(error => console.error(\"Error:\", error));\n//   };\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <h1>ToDo List</h1>\n//           <input\n//             type=\"text\"\n//             value={task}\n//             onChange={(e) => setTask(e.target.value)}\n//             placeholder=\"Enter a new task\"\n//           />\n//           <button onClick={addTask}>Add Task</button>\n//           <ul>\n//             {todos.map((todo) => (\n//               <li key={todo.id}>\n//                 {todo.description}\n//                 <button onClick={() => deleteTask(todo.id)}>Delete</button>\n//               </li>\n//             ))}\n//           </ul>\n//         </header>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import React, { useState, useEffect } from \"react\";\n// import \"./App.css\";\n\n// function App() {\n//   const [todos, setTodos] = useState([]);\n\n//   useEffect(() => {\n//     fetch(\"http://localhost:1433/api/tasks\")\n//       .then((response) => response.json())\n//       .then((data) => {\n//         setTodos(data); // Assuming the API returns an array of tasks\n//       })\n//       .catch((error) => console.error(\"Error fetching tasks:\", error));\n//   }, []);\n\n//   return (\n//     <>\n//       <Navbar />\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <h1>ToDo List</h1>\n//           <ul>\n//             {todos.map((todo) => (\n//               <li key={todo.Id}>{todo.Description}</li>\n//             ))}\n//           </ul>\n//         </header>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar'; // Adjust path if necessary\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [todos, setTodos] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetch('http://localhost:1433/api/tasks').then(response => response.json()).then(data => {\n      setTodos(data); // Assuming the API returns an array of tasks\n    }).catch(error => {\n      console.error('Error fetching tasks:', error);\n      setError('Failed to fetch tasks.'); // Set error state\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"ToDo List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: todos.length > 0 ? todos.map(todo => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: todo.Description\n          }, todo.Id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 17\n          }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No tasks available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 15\n          }, this) // Handle empty tasks list\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"dt52EhpTEzDvogNYoxRHpnHq6TY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Navbar","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","todos","setTodos","error","setError","fetch","then","response","json","data","catch","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","length","map","todo","Description","Id","_c","$RefreshReg$"],"sources":["D:/Projects/React/Beginners/ToDoList/todo-app/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import \"./App.css\";\n// import Navbar from \"./components/Navbar/Navbar.js\";\n\n// function App() {\n//   // State to store the list of tasks\n//   const [todos, setTodos] = useState([]);\n//   // State to store the current input value for a new task\n//   const [task, setTask] = useState(\"\");\n//   // Port number for the API (typically not recommended to hardcode unless necessary)\n//   const port = 1433;\n\n//   // Fetch the list of tasks from the API when the component mounts\n//   useEffect(() => {\n//     fetch(`http://localhost:${port}/api/tasks`)\n//       .then(response => response.json())\n//       .then(data => {\n//         // Assuming the API returns an array of tasks\n//         setTodos(data);\n//       })\n//       .catch(error => console.error(\"Error fetching tasks:\", error));\n//   }, [port]);\n\n//   // Function to add a new task\n//   const addTask = () => {\n//     if (task !== \"\") {\n//       fetch(`http://localhost:${port}/api/tasks`, {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({ description: task }),\n//       })\n//         .then(response => response.json())\n//         .then(data => {\n//           // Assuming the API returns the newly created task's ID\n//           setTodos([...todos, { id: data.taskId, description: task }]);\n//           setTask(\"\"); // Clear the input field after adding the task\n//         })\n//         .catch(error => console.error(\"Error:\", error));\n//     }\n//   };\n\n//   // Function to delete a task by its ID\n//   const deleteTask = (id) => {\n//     fetch(`http://localhost:${port}/api/tasks/${id}`, {\n//       method: \"DELETE\",\n//     })\n//       .then(response => response.json())\n//       .then(() => {\n//         // Remove the deleted task from the state\n//         setTodos(todos.filter(todo => todo.id !== id));\n//       })\n//       .catch(error => console.error(\"Error:\", error));\n//   };\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <h1>ToDo List</h1>\n//           <input\n//             type=\"text\"\n//             value={task}\n//             onChange={(e) => setTask(e.target.value)}\n//             placeholder=\"Enter a new task\"\n//           />\n//           <button onClick={addTask}>Add Task</button>\n//           <ul>\n//             {todos.map((todo) => (\n//               <li key={todo.id}>\n//                 {todo.description}\n//                 <button onClick={() => deleteTask(todo.id)}>Delete</button>\n//               </li>\n//             ))}\n//           </ul>\n//         </header>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import React, { useState, useEffect } from \"react\";\n// import \"./App.css\";\n\n// function App() {\n//   const [todos, setTodos] = useState([]);\n\n//   useEffect(() => {\n//     fetch(\"http://localhost:1433/api/tasks\")\n//       .then((response) => response.json())\n//       .then((data) => {\n//         setTodos(data); // Assuming the API returns an array of tasks\n//       })\n//       .catch((error) => console.error(\"Error fetching tasks:\", error));\n//   }, []);\n\n//   return (\n//     <>\n//       <Navbar />\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <h1>ToDo List</h1>\n//           <ul>\n//             {todos.map((todo) => (\n//               <li key={todo.Id}>{todo.Description}</li>\n//             ))}\n//           </ul>\n//         </header>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar'; // Adjust path if necessary\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetch('http://localhost:1433/api/tasks')\n      .then(response => response.json())\n      .then(data => {\n        setTodos(data); // Assuming the API returns an array of tasks\n      })\n      .catch(error => {\n        console.error('Error fetching tasks:', error);\n        setError('Failed to fetch tasks.'); // Set error state\n      });\n  }, []);\n\n  return (\n    <>\n      <Navbar />\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>ToDo List</h1>\n          {error && <p className=\"error\">{error}</p>} {/* Display error message if any */}\n          <ul>\n            {todos.length > 0 ? (\n              todos.map(todo => (\n                <li key={todo.Id}>{todo.Description}</li>\n              ))\n            ) : (\n              <p>No tasks available</p> // Handle empty tasks list\n            )}\n          </ul>\n        </header>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}