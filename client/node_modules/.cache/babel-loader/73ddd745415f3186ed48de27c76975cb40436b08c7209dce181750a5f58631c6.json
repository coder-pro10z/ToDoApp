{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\React\\\\Beginners\\\\ToDoList\\\\todo-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import \"./App.css\";\n// import Navbar from \"./components/Navbar/Navbar.js\";\n\n// function App() {\n//   // State to store the list of tasks\n//   const [todos, setTodos] = useState([]);\n//   // State to store the current input value for a new task\n//   const [task, setTask] = useState(\"\");\n//   // Port number for the API (typically not recommended to hardcode unless necessary)\n//   const port = 1433;\n\n//   // Fetch the list of tasks from the API when the component mounts\n//   useEffect(() => {\n//     fetch(`http://localhost:${port}/api/tasks`)\n//       .then(response => response.json())\n//       .then(data => {\n//         // Assuming the API returns an array of tasks\n//         setTodos(data);\n//       })\n//       .catch(error => console.error(\"Error fetching tasks:\", error));\n//   }, [port]);\n\n//   // Function to add a new task\n//   const addTask = () => {\n//     if (task !== \"\") {\n//       fetch(`http://localhost:${port}/api/tasks`, {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({ description: task }),\n//       })\n//         .then(response => response.json())\n//         .then(data => {\n//           // Assuming the API returns the newly created task's ID\n//           setTodos([...todos, { id: data.taskId, description: task }]);\n//           setTask(\"\"); // Clear the input field after adding the task\n//         })\n//         .catch(error => console.error(\"Error:\", error));\n//     }\n//   };\n\n//   // Function to delete a task by its ID\n//   const deleteTask = (id) => {\n//     fetch(`http://localhost:${port}/api/tasks/${id}`, {\n//       method: \"DELETE\",\n//     })\n//       .then(response => response.json())\n//       .then(() => {\n//         // Remove the deleted task from the state\n//         setTodos(todos.filter(todo => todo.id !== id));\n//       })\n//       .catch(error => console.error(\"Error:\", error));\n//   };\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <h1>ToDo List</h1>\n//           <input\n//             type=\"text\"\n//             value={task}\n//             onChange={(e) => setTask(e.target.value)}\n//             placeholder=\"Enter a new task\"\n//           />\n//           <button onClick={addTask}>Add Task</button>\n//           <ul>\n//             {todos.map((todo) => (\n//               <li key={todo.id}>\n//                 {todo.description}\n//                 <button onClick={() => deleteTask(todo.id)}>Delete</button>\n//               </li>\n//             ))}\n//           </ul>\n//         </header>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import React, { useState, useEffect } from \"react\";\n// import \"./App.css\";\n\n// function App() {\n//   const [todos, setTodos] = useState([]);\n\n//   useEffect(() => {\n//     fetch(\"http://localhost:1433/api/tasks\")\n//       .then((response) => response.json())\n//       .then((data) => {\n//         setTodos(data); // Assuming the API returns an array of tasks\n//       })\n//       .catch((error) => console.error(\"Error fetching tasks:\", error));\n//   }, []);\n\n//   return (\n//     <>\n//       <Navbar />\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <h1>ToDo List</h1>\n//           <ul>\n//             {todos.map((todo) => (\n//               <li key={todo.Id}>{todo.Description}</li>\n//             ))}\n//           </ul>\n//         </header>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default App;\n\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import Navbar from './components/Navbar/Navbar'; // Adjust path if necessary\n\n// function App() {\n//   const [todos, setTodos] = useState([]);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     fetch('http://localhost:1433/api/tasks')\n//       .then(response => response.json())\n//       .then(data => {\n//         setTodos(data); // Assuming the API returns an array of tasks\n//       })\n//       .catch(error => {\n//         console.error('Error fetching tasks:', error);\n//         setError('Failed to fetch tasks.'); // Set error state\n//       });\n//   }, []);\n\n//   return (\n//     <>\n//       <Navbar />\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <h1>ToDo List</h1>\n//           {error && <p className=\"error\">{error}</p>} {/* Display error message if any */}\n//           <ul>\n//             {todos.length > 0 ? (\n//               todos.map(todo => (\n//                 <li key={todo.Id}>{todo.Description}</li>\n//               ))\n//             ) : (\n//               <p>No tasks available</p> // Handle empty tasks list\n//             )}\n//           </ul>\n//         </header>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar'; // Adjust path if necessary\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [todos, setTodos] = useState([]);\n  const [task, setTask] = useState('');\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetch('http://localhost:1433/api/tasks').then(response => response.json()).then(data => {\n      setTodos(data); // Assuming the API returns an array of tasks\n    }).catch(error => {\n      console.error('Error fetching tasks:', error);\n      setError('Failed to fetch tasks.'); // Set error state\n    });\n  }, []);\n  const addTask = () => {\n    if (task.trim() === '') {\n      setError('Task description cannot be empty.');\n      return;\n    }\n    fetch('http://localhost:3001/api/tasks', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        description: task\n      })\n    }).then(response => {\n      // Check if the response is OK (status code 200-299)\n      if (!response.ok) {\n        return response.text().then(text => {\n          throw new Error(text); // Throw error with response text\n        });\n      }\n      return response.json(); // Parse response as JSON\n    }).then(data => {\n      if (data.taskId) {\n        setTodos([...todos, {\n          Id: data.taskId,\n          Description: task\n        }]);\n        setTask('');\n        setError(null);\n      }\n    }).catch(error => {\n      console.error('Error adding task:', error);\n      setError('Failed to add task: ' + error.message); // Show detailed error\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"ToDo List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: task,\n          onChange: e => setTask(e.target.value),\n          placeholder: \"Enter task description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addTask,\n          children: \"Add Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: todos.length > 0 ? todos.map(todo => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: todo.Description\n          }, todo.Id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 17\n          }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No tasks available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"3iG7ehzeMGkR2j5I7Nlk5q6fu6E=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Navbar","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","todos","setTodos","task","setTask","error","setError","fetch","then","response","json","data","catch","console","addTask","trim","method","headers","body","JSON","stringify","description","ok","text","Error","taskId","Id","Description","message","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","value","onChange","e","target","placeholder","onClick","length","map","todo","_c","$RefreshReg$"],"sources":["D:/Projects/React/Beginners/ToDoList/todo-app/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import \"./App.css\";\n// import Navbar from \"./components/Navbar/Navbar.js\";\n\n// function App() {\n//   // State to store the list of tasks\n//   const [todos, setTodos] = useState([]);\n//   // State to store the current input value for a new task\n//   const [task, setTask] = useState(\"\");\n//   // Port number for the API (typically not recommended to hardcode unless necessary)\n//   const port = 1433;\n\n//   // Fetch the list of tasks from the API when the component mounts\n//   useEffect(() => {\n//     fetch(`http://localhost:${port}/api/tasks`)\n//       .then(response => response.json())\n//       .then(data => {\n//         // Assuming the API returns an array of tasks\n//         setTodos(data);\n//       })\n//       .catch(error => console.error(\"Error fetching tasks:\", error));\n//   }, [port]);\n\n//   // Function to add a new task\n//   const addTask = () => {\n//     if (task !== \"\") {\n//       fetch(`http://localhost:${port}/api/tasks`, {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({ description: task }),\n//       })\n//         .then(response => response.json())\n//         .then(data => {\n//           // Assuming the API returns the newly created task's ID\n//           setTodos([...todos, { id: data.taskId, description: task }]);\n//           setTask(\"\"); // Clear the input field after adding the task\n//         })\n//         .catch(error => console.error(\"Error:\", error));\n//     }\n//   };\n\n//   // Function to delete a task by its ID\n//   const deleteTask = (id) => {\n//     fetch(`http://localhost:${port}/api/tasks/${id}`, {\n//       method: \"DELETE\",\n//     })\n//       .then(response => response.json())\n//       .then(() => {\n//         // Remove the deleted task from the state\n//         setTodos(todos.filter(todo => todo.id !== id));\n//       })\n//       .catch(error => console.error(\"Error:\", error));\n//   };\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <h1>ToDo List</h1>\n//           <input\n//             type=\"text\"\n//             value={task}\n//             onChange={(e) => setTask(e.target.value)}\n//             placeholder=\"Enter a new task\"\n//           />\n//           <button onClick={addTask}>Add Task</button>\n//           <ul>\n//             {todos.map((todo) => (\n//               <li key={todo.id}>\n//                 {todo.description}\n//                 <button onClick={() => deleteTask(todo.id)}>Delete</button>\n//               </li>\n//             ))}\n//           </ul>\n//         </header>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import React, { useState, useEffect } from \"react\";\n// import \"./App.css\";\n\n// function App() {\n//   const [todos, setTodos] = useState([]);\n\n//   useEffect(() => {\n//     fetch(\"http://localhost:1433/api/tasks\")\n//       .then((response) => response.json())\n//       .then((data) => {\n//         setTodos(data); // Assuming the API returns an array of tasks\n//       })\n//       .catch((error) => console.error(\"Error fetching tasks:\", error));\n//   }, []);\n\n//   return (\n//     <>\n//       <Navbar />\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <h1>ToDo List</h1>\n//           <ul>\n//             {todos.map((todo) => (\n//               <li key={todo.Id}>{todo.Description}</li>\n//             ))}\n//           </ul>\n//         </header>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default App;\n\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import Navbar from './components/Navbar/Navbar'; // Adjust path if necessary\n\n// function App() {\n//   const [todos, setTodos] = useState([]);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     fetch('http://localhost:1433/api/tasks')\n//       .then(response => response.json())\n//       .then(data => {\n//         setTodos(data); // Assuming the API returns an array of tasks\n//       })\n//       .catch(error => {\n//         console.error('Error fetching tasks:', error);\n//         setError('Failed to fetch tasks.'); // Set error state\n//       });\n//   }, []);\n\n//   return (\n//     <>\n//       <Navbar />\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <h1>ToDo List</h1>\n//           {error && <p className=\"error\">{error}</p>} {/* Display error message if any */}\n//           <ul>\n//             {todos.length > 0 ? (\n//               todos.map(todo => (\n//                 <li key={todo.Id}>{todo.Description}</li>\n//               ))\n//             ) : (\n//               <p>No tasks available</p> // Handle empty tasks list\n//             )}\n//           </ul>\n//         </header>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState,useEffect } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar'; // Adjust path if necessary\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [task, setTask] = useState('');\n  const [error, setError] = useState(null);\n\n  \n  useEffect(() => {\n    fetch('http://localhost:1433/api/tasks')\n      .then(response => response.json())\n      .then(data => {\n        setTodos(data); // Assuming the API returns an array of tasks\n      })\n      .catch(error => {\n        console.error('Error fetching tasks:', error);\n        setError('Failed to fetch tasks.'); // Set error state\n      });\n  }, []);\n  const addTask = () => {\n    if (task.trim() === '') {\n      setError('Task description cannot be empty.');\n      return;\n    }\n  \n    fetch('http://localhost:3001/api/tasks', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ description: task }),\n    })\n      .then(response => {\n        // Check if the response is OK (status code 200-299)\n        if (!response.ok) {\n          return response.text().then(text => {\n            throw new Error(text); // Throw error with response text\n          });\n        }\n        return response.json(); // Parse response as JSON\n      })\n      .then(data => {\n        if (data.taskId) {\n          setTodos([...todos, { Id: data.taskId, Description: task }]);\n          setTask('');\n          setError(null);\n        }\n      })\n      .catch(error => {\n        console.error('Error adding task:', error);\n        setError('Failed to add task: ' + error.message); // Show detailed error\n      });\n  };\n  \n  return (\n    <>\n      <Navbar />\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>ToDo List</h1>\n          <input\n            type=\"text\"\n            value={task}\n            onChange={(e) => setTask(e.target.value)}\n            placeholder=\"Enter task description\"\n          />\n          <button onClick={addTask}>Add Task</button>\n          {error && <p className=\"error\">{error}</p>}\n          <ul>\n            {todos.length > 0 ? (\n              todos.map(todo => (\n                <li key={todo.Id}>{todo.Description}</li>\n              ))\n            ) : (\n              <p>No tasks available</p>\n            )}\n          </ul>\n        </header>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n\n\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAACC,SAAS,QAAQ,OAAO;AACjD,OAAO,WAAW;AAClB,OAAOC,MAAM,MAAM,4BAA4B,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEjD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAGxCC,SAAS,CAAC,MAAM;IACdc,KAAK,CAAC,iCAAiC,CAAC,CACrCC,IAAI,CAACC,Q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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}